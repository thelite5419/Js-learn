- when we have multiple JavaScript files in the webpage  we can make a bundle of files using the API

WORKING OF THE JAVASCRIPT ->
	- JavaScript execution context 
	- in the js exe context the global exe. is executed using the this operator
	- then the memory is allocated with undefined values
	- when a function is executed the reference is created 
	- the function reference contain the memory phase 
	- in the memory phase the value is allocated woth memory
	- then execution phase is done
	- values are declared

CALLSTACKS = 
	- it is a stack with the stack with the global execution at the bottom 
	- then the function are pushed and then the function is executed and the they are removed
	- when the function contain the another function they the execution context remains to the first function 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
STACK AND HEAP-----------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

the memory is used in two forms 	
	1. stack
	2. heap 

1. stack - stack stores the primitive values such as variables floats and Booleans 
2. heap - it stores the non-primitives data types such as the reference 

- cause the primitives values don't store the references so if the related variables are changed so the other variables don't change 

- the heap value stores the reference into the stack so if the one reference variable changes its values the other also change cause they are sharing the same information 

for e.g 
--- IN case of the Stack
let myEmail = "prathameshpise6@gmail.com"
let newEmail = myEmail;
[here the datatypes are primitve and their copy of both is stored into the stack differently]
//so when,
newEmail = "theprathamesh07@gmail.com"
[it doesn't change the value of the "myEmail" cause they are stores differently into the stack area]

--- IN the case of Heap
let firstval = {
	id = 101,
	name = 'abc',
}

let secVal = firstVal

[in the obve case it we have consideres the object cause it is nonprimitive datatype and both variables points to the same object in the heap memory and variables stored into the stack]
//so if,

secVal.id = 102;
console.log(firstVal);
console.log(secVal);

[both output statments will give the same objects cause they are referncing to the same object ]
FIGURE_1.0 [WATCH IT IN THE FOLDER]


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
STRING--------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


New way to concate the string and the variables = 
console.log(`this is the representation of the string ${variable} <- this is how we include the variables in the string`);

methods -
	variable.length()
	variable.toUpperCase();
	variable.toLowercase();
	variable.charAt(number that you want to find what the char is at that number);
	variable.substring(start, till you want string);
	variable.slice()-> same as above but we can get last to start 
	variable.trim() -> used to remove the spaces in the string[used in the form to remove the unnessasary spaces
	variable.replace('20', '-') -> used yo replace chars in the string
	variables.include('pra') -> used to find if it exist in the string or not 
	variable.split('-') -> splites the string in multiple parts if it has the '-' e.g. = my-name-is => 'my', 'name', 'is';

3. Removing Leading and Trailing White Spaces, and Reducing Multiple White Spaces to a Single Space
If you want to remove leading and trailing white spaces and also reduce multiple white spaces within the string to a single space, you can combine trim and replace:

let str = "   Hello   World!   ";
let cleanedStr = str.trim().replace(/\s+/g, ' ');
console.log(cleanedStr);  // "Hello World!"
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NUMBERS -----------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


simple pattern 
const score = 400;
console.log(score);
-> 400


-/making the var only for number =>
const balance = new Number(90);
console.log(balance)
output -> [number : 90]


-/ making the number to string 
balance.tostring();

-/floating pointer value fixing 
balance.toFixed(1);
-> 69.0

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
MATHS-------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

math library is perbulid in the js
it is a object 

methods
	Math.abs(-4) => minus changed to positive
	math.round(3.6) => rounds off the number (4)
	math.ceil(4.2) => 5
	math.ceil(4.2) => 4
	math.random() => gives value from 0 to 1
	math.min => finding small value from the array
	math.max

using the math.random to get the values from the 10 to 20 
console.log(math.floor(math.random() *(max-min) +1) + min)


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DATE-------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

initiaizing date

let myDate = new Date();
console.log(myDate.toString());


cosole.log(myDate.toDateString());
console.log(myDate.toDateString());
console.log(myDate.toLocalString());

"date is the object in the js"

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Timestamp-------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

initialization 

let mytimestamp = date.now();


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ARRAY----------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

initalization -> 

const myArr = [1,2,3,'a',true]

it is dynamic ccan hold multiple values at a time

-//shallow - stack heap refrence change point 

 various type to declare :
1. const myHero  = ['shaktiman', 'batman'];
2. const myAraay2 = new Array(1,2,3,4);

methods 
1. myarr.push(7) => pushing values in array at end 
2. myarr.pop(8) => removes last value
3. myarr.unshift(9) => insert array at start (time consumation issue cause need to add and shift whole array)
4. myarr.shift() => removes first value
5. myarr = newarr.join() => joins the array and converts the resul into the string
6. arr.slice(start, end) => gives value from the start to end
7. arr.splice(index, numberOfValuesYoUWantToDelete) => different from the slice it manupulates the original array

- passing the array in the array will end up in the array inside array
8. array.concat(array2); => to join those arrays we use the concat method as the 
- spread operator is the easy way to join two arrays
9. arr.flat("depth") => flat the nested arrays can be un-nested using the flat
10 Array.from("string") =>  we can convert the strings into the array using the from method 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
OBJECT----------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

- two ways to initialize

1. literal
const JsUser = {
  Fname : 'prathamesh',
  id : 101,
  age : 20,
  email : 'prathameshpise6@gmail.com',
  "name IS" : "thelite"
}

2. singleton
when we declare it as the constructors it is singleton

2 ways to access the data inside object 
	1. JsUser.Fname
	2. JsUser["name IS"] => this is used when the key inside the object is the string and also when the key is the symbol

methods
1. Object.freeze(Obj) => freeze used to make the key value unchangeable


HOW TO MAKE OBJECT SINGLETON AND LITERALS MEANS BY CONSTRUCTOR
 const instaUser = new Object(); // singleton object 
 const instaUser = {} // non singleton object



instaUser.id = "thelite_editx"; //changing object value
instaUser.email = "theprathamesh07@gmail.com"; //changing object value
instaUser.isLoggedIn = false; //changing object value

console.log(instaUser);

//object inside object 

const regularUser= {
  id  : "thelite_code",
   name: {
    fname : "prathamesh",

  }
}

console.log(regularUser);
console.log(regularUser.name.fname); // accessing the pbject inside object


//combining the both object
cosnt obj3 = Object.assign(obj1 , instaUser);


//when we have multiple objects 
obj3 = Object.assign({} , obj1, obj2 , instaUser); // {}(used in most of the production and used as empty object to store multiple values)used to store multiple object


//when we have multiple objects 
obj3 = Object.assign({} , obj1, obj2 , instaUser);

//another way to assign the multiple object to a single object using the spread operatoe
const obj = {...instaUser, ...obj3}


//object inside the array 

const arr = [
  {
    id : 1,
    name : "nam"
  },

  {
    lname : "Head",
    
  }
]

console.log( arr[0].name);

//to check if the property is presernt in the array or not 
const arrprop  = {
  id : 101,
  email: "the"
}

console.log(arrprop.hasOwnProperty('has'));

DE-STRUCTURING 
- destructing id used when we want to fetch the data from the api. it destructure the data 

e.g. 
const course = {
  name: "the",
  id : 101
}
const {name} = course;
console.log(name);


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
JSOn------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

in the json the keys are the string
{
	"name" : "ABC"
	"id" : "101"
}


gets api as above 
[ => array
	{}, => object
	{},
	{}, 
]
the api can be in the format of the object in the array in the JSON format

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
FUNCTION------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

- it is used to reduce the task that needs regular execution 
- so when the function gets call it executes the program inside

e.g.
function num (a, b){
  let c = a+b
  return c;
}

console.log(num(2, 5));

- we can also assign the function to variable 

const result = num (5,5)
console.log(result)

- after the return statement in the function the will stop executing further if after the return some statements are remaining it will not read those statements

function isLoggedIn(user){
  if (user === undefined)
    {
      console.log(`not logged in`)
      
    }
    else{
      console.log(`${user} logged in`);
    }
}

isLoggedIn();

// used when we want to give some default value to it. we specify the name in the parameter
function isLoggedIn(user = 'thelite'){
  if (user === undefined)
    {
      console.log(`not logged in`)
      
    }
    else{
      console.log(`${user} logged in`);
    }
}

isLoggedIn();


//handling the object with the function 
const user ={
  id: 101,
  name: "that"
}

function handleObject(any){
  console.log(`${any.id} is the id `);
}

handleObject(user);


handling the Array in the function 

const myArray = [1,2,6,4]

function getTheArray (any){
  return  any[1]; 
}

console.log(getTheArray(myArray));

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
REST OPERATOR IN THE FUNCTION------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Used when the parameter values are not specified means if we go to shopping the things we will pick is not defined 

used like the spread operator and based on the used cases it is idfied that if it is rest or spread


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SCOPEs------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//scope means the accesability of the variable in the program 

let a = 10; //scope is is allocated till the curly braces (block scope)
var b = 50; // it is acessible in the whole program (not recomended)(globle scope)
const c = 60; //it is like a fixed value if it declared outside any scope then it cannot be chnage except when it is declred inside the block scope then it can be changed but it is only remain inside that scope

console.log(`${a}, ${b}, ${c}`);


// if the const and let is declared in both the global and block scope then the block scope is changable but only inside that scope

let fixed = 100
const pi = 3.14;

if(true){
  let fixed = 50;
  const pi = 50 ;
  console.log(`let inside the block scope : ${fixed}  \n const inside the block scope : ${pi}`);
}
// out side the block scope value at the inital are considered
console.log(`let outside the block scope : ${fixed}  \n const inside the block scope : ${pi}`); 
// we have to declare them inside the block if we dont want to change the gloable value 
//after we declare them inside the scope thier scope remain till the block scope and they dont change the global value 
// let can be used as it is but it will chnage the gloable value 
//but the const need to be declare if we want to use them  

//global scope is different in the both webpage and node 

two ways for function 
function addone (num){
 return num+1;
}

console.log(addone(5));


let addtwo = function addtwo (num){
  return num+2;
 }
 
console.log(addtwo(5));// this will not generate the error but when we want to declare the function call before function  such as


console.log(addone(5)); //this will not give error and run smoothly 
function addone (num){
 return num+1;
}

 
console.log(addtwo(5));
let addtwo = function addtwo (num){
  return num+2;
 }// but this will give you the error cause we have given the variable for the function it will result in the hoisting problem


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
THIS KEYWORD ------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
const user =  {
userName : 'prathamesh07',
id : "thelite",

welcomeMessagr : function (){
  console.log(`welcome ${this.userName} to the website`); // used to refer the currunt context 
  console.log(this);
}
}

user.welcomeMessagr();
// changing the currunt context 
user.userName = "vankatesh"//chnaging the currunt context and seeing the value 
user.welcomeMessagr(); // it will give the new currunt value that is been allocated 

console.log(this) // this will result in the empty curly braces cause we are  running this into the node enviroment but in the case of the running this in the webpage console it will give the currunt context of the webpage

console.log(this) // run this in the webpage console


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ARROW FUNCTION ------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

this keyword used to refer to the currunt context of the program for e.g. 
regular function cannot run the this key word so we use the arrow function to do that
e.g.
 function thisCheck (){
  let userName = 'prathamesh'
  console.log(this.cleauserName);
 }

 thisCheck();

===> undefined
dont tell this in the interview 

BASIC SYNTAX OF THE ARROW FUNCTION 
const addTwo = (n1, n2) => {
return n1 + n2 ; 
}

console.log(addTwo(12, 25))

use of the arrow function as above
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Hoisting------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
hoisting in javascript
Understanding Hoisting in JavaScript

Hoisting in JavaScript is a fundamental concept that refers to the language’s default behavior of moving declarations to the top of their scope. This means that declarations of variables and functions are moved to the top of their scope, making them accessible throughout that scope.

How Hoisting Works

Hoisting is a mechanism that occurs during the compilation phase, before code execution. It’s essential to understand that hoisting only moves declarations, not initializations. This means that variables declared with let and const are hoisted, but their values are not initialized until the point of declaration.

Types of Scopes

In JavaScript, there are two types of scopes:

Global Scope: The scope outside the outermost function attached to the window.
Local Scope: The scope inside the function being executed.
Hoisting Examples

Here are some examples to illustrate hoisting:

Example 1:
console.log(x); // Output: undefined
var x = 10;

In this example, the variable x is declared after it’s used, but due to hoisting, the declaration is moved to the top of the scope, making it accessible.

Example 2:
console.log(greeting()); // Output: "Hello"
function greeting() {
  return "Hello";
}

In this example, the greeting function is declared after it’s called, but due to hoisting, the declaration is moved to the top of the scope, making it accessible.

Best Practices

To avoid issues with hoisting, it’s recommended to declare all variables at the beginning of their scope. This ensures that variables are initialized before they’re used, and functions are declared before they’re called.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
immediately Invoked Function Expressions IIFE ------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// sometimes pollution happens cause of the globle scope to avoid this we use the iife

// how it is used

// function one() {
//   console.log("w/o iife");
// }
// one();

// (function two() {
//   console.log("w iife");
// })();
  // it is genarally used to speed up the execution and avoids the global scope pollution
  // two braces is used ()()first one wraps the function inside it and the second one is used as the caller that calls the function unlike the regular fucntion where we call the functino using its name here we only add the empty braces a;ong with the wrapped funtion

  // if you want to pass the parameters to the iife function it will goes like

  ((name) => 
    { console.log(`this is the name : ${name}`);
})('pratahamesh');

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EVENT----------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

A click by a user
to handle this event their are event handler
when the event handler happens some functions are envoked 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
FOR LOOP----------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

same as the c

- in the javascript we can loop on the arrays 

let myArray = [1,2,3,4];
console.log(`${myArray.length} '\n\n`);
for (let index = 0; index < myArray.length; index++) {
  const element = myArray[index];
 console.log(element);
}

- break used to stop the loop that is ongoing 
- the continue keyword is used to skip the current iteration and continues the loop by further iteration 

while and do while same as the c and c++

-// FOR OF 

it is used to use the the for loop efficiently it automatically iterarte the loop till the values inside the variable is ended for example it is implemented into the string and arrays 
for e.g.

let myArray = ['prathamesh', 'nikhil', 'ajinkya'];
for (const oneArr of myArray) {
  console.log(oneArr);
}

 loop  on the string
let myArray = 'prathamesh'
for (const oneArr of myArray) {
  console.log(oneArr);
} 


-//maps
-used to give the unique value no duplicate one
- used to get the values from the for of loop but can be print through for of loop 


for in loop 
this loop is used to get the index number of the arrsy and string

for each loop 
it is a method used to get the loop

const loop = [1,2,2,4,5];

loop.forEach( function (item){
  console.log(item);
})

we pass the function in the method braces the function iterate through the each value and stores it into the function parameters as the above is the item and returns it 

we can pass the arrow function in the method as the function
like the different different types that is used to pass the function in this one the same is used

for each dont return any values like above
myArray = [1,2,3,4,5,6];

const value = myArray.forEach((item) => {
  return item
});
console.log(value);

to use the return value we use the filter function 
filter basically used to get the data that we want from the array 
for e.g

myArray = [1,2,3,4,5,6,4]

const newarr = myArray.filter ((num) => {
  if (num< 4)
    return num
  })

  console.log(newarr);

we can also chain the filter means we can nest the filter and map to get the accurate value
-// reduce
 
reduce is used to 


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DOM Manipulation ----------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
getElementById();
title.style.{any property};
innerText = content inside the element
innerContent = different from the innerText such as it shows the hidden elements inside the  web-page
innerHTML - used to get the whole element tag
document.querySelector(".class" / "#id" / "p" / "h1") = used to get the tags
querySelectorAll('all'); - this will give the array of the element we can change the style of it like the arrays using the index e.g. element[0].style.color = 'green'

-// relations in the DOM

-// creating the new element using the javascript 
document.createElement('div');
adding properties in the div 
- classname
- id

setting Attributes 
div.setAttribute("title", "generated title"); // more optimal to use 
div.style.backgroundColor = "red"

this is stored inside the memory we have to bring that in the web page 

document.body.appendChild(div);


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Events----------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- in js the events happens sequentially
- when we have large scale project the onclick is not very feasible
- also when we add the onclick on the id by document.getElementById("id").onclick this is not also a good practice 


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
</head>
<body>
  <div id="owl" style="height: 100px;
    width: 100px;
    background-color: black;"></div>
  <script>
    document.getElementById("owl").addEventListener('click', function(){
      alert("div is clicked")
    }) 
  </script>
</body>
</html>

-/ EVENT OBJECT 
 document.getElementById("owl").addEventListener('click', function(e){
      alert("div is clicked")

------ e is the object 

-//Event Propogation 
2 types of concept 
false value is deafault 
event propogation has 2 types bubbling and capturing 

capturing is default (false)
bubbuling is used if needed (true )


document.getElementById("owl").addEventListener('click', function(){
      alert("div is clicked")
    }true );

bubbling is the concept where the child element is accesed and then the parent is accessed after

e.g.
document.getElementById("owl").addEventListener('click', function(){
      console.log("parent");
    }) 

    document.getElementById("owl1").addEventListener('click', function(){
      console.log("child")
    }) 


capturing is reverse 
parent first child second

-// defaultpreventer is used to prevent the the bubbling 
document.getElementById("owl1").addEventListener('click', function(e){
      e.preventDefault();
      console.log("child");
    }) 



->>Target - used to get the element of the webpage

document.getElementById("owl1").addEventListener('click', function(e){
 
      console.log();
    }) 


e.target.parentNode -  used to get the parent element 


-- removing the element from the webpage

let removeIt = e.target
removeIt.remove()

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
async code----------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

js is synchronous
it is single threaded
js comes with run time environment 
we explicitly do asyn if needed

it executes the statement consecutively 

-//blocking and non blocking code
blocking - it blocks the execution of the code till current statement gets executed
non- blocking - if current statement takes to much time it goes to next statement
 
fetching and reading files does the blocking 

blocking is used when the one block of code is dependant on the other block of code

/////////////VIEW FIGURE_02

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
promise ----------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- promise is the execution queue that yet to be completed
- promise is completed in the future 
- it has three states 
- promises is the object 


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
fetch ----------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- fetch makes the new special queue for the tasks they are executed first rather than the other statements 
-  whenever fetch i used it happens on two part 
1. web browsers 
2. one part for specifying memory space 